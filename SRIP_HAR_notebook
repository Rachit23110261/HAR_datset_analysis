{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10881873,"sourceType":"datasetVersion","datasetId":6761658}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport pandas as pd\nimport numpy as np\nimport os\n\ndef process_data(base_path, dataset_type=\"Train\"):\n    \"\"\"\n    Process UCI HAR dataset and store combined CSVs.\n    \"\"\"\n    save_dir = os.path.join(\"Combined\", dataset_type)\n    \n    # Dictionary of activities\n    ACTIVITIES = {\n        1: 'WALKING',\n        2: 'WALKING_UPSTAIRS',\n        3: 'WALKING_DOWNSTAIRS',\n        4: 'SITTING',\n        5: 'STANDING',\n        6: 'LAYING',\n    }\n    \n    # Load all the accelerometer and gyroscope data\n    total_acc_x = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"total_acc_x_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    total_acc_y = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"total_acc_y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    total_acc_z = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"total_acc_z_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    \n    body_acc_x = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_acc_x_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_acc_y = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_acc_y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_acc_z = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_acc_z_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    \n    body_gyro_x = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_gyro_x_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_gyro_y = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_gyro_y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_gyro_z = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_gyro_z_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    \n    # Read subject IDs and labels\n    subject_data = pd.read_csv(os.path.join(base_path, f\"subject_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    y_labels = pd.read_csv(os.path.join(base_path, f\"y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    \n    # Process each subject\n    for subject in np.unique(subject_data.values):\n        sub_idxs = np.where(subject_data.iloc[:, 0] == subject)[0]\n        labels = y_labels.loc[sub_idxs]\n        \n        # Process each activity label\n        for label in np.unique(labels.values):\n            activity_path = os.path.join(save_dir, ACTIVITIES[label])\n            os.makedirs(activity_path, exist_ok=True)\n            \n            label_idxs = labels[labels.iloc[:, 0] == label].index\n            \n            accx, accy, accz = [], [], []\n            body_accx, body_accy, body_accz = [], [], []\n            body_gyrox, body_gyroy, body_gyroz = [], [], []\n            \n            for idx in label_idxs:\n                accx = np.hstack((accx, total_acc_x.loc[idx][64:]))\n                accy = np.hstack((accy, total_acc_y.loc[idx][64:]))\n                accz = np.hstack((accz, total_acc_z.loc[idx][64:]))\n                \n                body_accx = np.hstack((body_accx, body_acc_x.loc[idx][64:]))\n                body_accy = np.hstack((body_accy, body_acc_y.loc[idx][64:]))\n                body_accz = np.hstack((body_accz, body_acc_z.loc[idx][64:]))\n                \n                body_gyrox = np.hstack((body_gyrox, body_gyro_x.loc[idx][64:]))\n                body_gyroy = np.hstack((body_gyroy, body_gyro_y.loc[idx][64:]))\n                body_gyroz = np.hstack((body_gyroz, body_gyro_z.loc[idx][64:]))\n            \n            # Save data to CSV\n            data = pd.DataFrame({\n                'accx': accx, 'accy': accy, 'accz': accz,\n                'body_accx': body_accx, 'body_accy': body_accy, 'body_accz': body_accz,\n                'body_gyrox': body_gyrox, 'body_gyroy': body_gyroy, 'body_gyroz': body_gyroz\n            })\n            save_path = os.path.join(activity_path, f\"Subject_{subject}.csv\")\n            data.to_csv(save_path, index=False)\n    \n    print(f\"Done Combining {dataset_type} data\")\n\n# Process training and testing datasets\ntrain_path = \"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train\"\ntest_path = \"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/test\"\n\nprocess_data(train_path, \"Train\")\nprocess_data(test_path, \"Test\")\nprint(\"Done Combining all data\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:35:54.610001Z","iopub.execute_input":"2025-02-28T18:35:54.610366Z","iopub.status.idle":"2025-02-28T18:36:10.257636Z","shell.execute_reply.started":"2025-02-28T18:35:54.610343Z","shell.execute_reply":"2025-02-28T18:36:10.256650Z"}},"outputs":[{"name":"stdout","text":"Done Combining Train data\nDone Combining Test data\nDone Combining all data\n","output_type":"stream"}],"execution_count":70},{"cell_type":"markdown","source":"## Data Preprocessing\n\nCombined total acceleration in X,Y,Z to create a structured dataset for Human Activity Recognition (HAR). The dataset is divided into training and testing sets, where each subject’s accelerometer readings are categorized based on the performed activity.\n\n* Read accelerometer data from the UCI HAR Dataset.\n* Read corresponding subject IDs and activity labels (y_train.txt, y_test.txt).\n* Combine accelerometer readings along the time axis, removing the first 64 samples as Waste.\n* Save processed data as CSV files under \"Combined/Train\" and \"Combined/Test\", ensuring each subject's data is stored separately","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nACTIVITIES = {\n    'WALKING': 0,\n    'WALKING_UPSTAIRS': 1,\n    'WALKING_DOWNSTAIRS': 2,\n    'SITTING': 3,\n    'STANDING': 4,\n    'LAYING': 5,\n}\ndef load_data(data_type=\"Train\"):\n    \"\"\"\n    Load accelerometer data from 'Combined' directory and return features (X) and labels (y).\n    \"\"\"\n    X, y = [], []\n\n    base_path = os.path.join(\"Combined\", data_type)\n    \n    for activity, label in ACTIVITIES.items():\n        activity_path = os.path.join(base_path, activity)\n        \n        for file in os.listdir(activity_path):\n            file_path = os.path.join(activity_path, file)\n            df = pd.read_csv(file_path)\n\n            # Ensure data shape consistency (128 time steps, 3 features)\n            if df.shape[0] == 64:\n                df = df.tail(64)\n            elif df.shape[0] > 128:\n                df = df.iloc[:128]  \n\n            X.append(df.values)\n            y.append(label)\n\n    X = np.array(X)\n    y = np.array(y)\n    \n    # One-hot encode labels\n    y = to_categorical(y, num_classes=len(ACTIVITIES))\n    \n    return X, y\n\n# Load training and test data\nX_train, y_train = load_data(\"Train\")\nX_test, y_test = load_data(\"Test\")\n\n# Print dataset shapes\nprint(f\"X_train shape: {X_train.shape}\")  # Expected: (samples, 128, 3)\nprint(f\"y_train shape: {y_train.shape}\")  # Expected: (samples, 6)\nprint(f\"X_test shape: {X_test.shape}\")\nprint(f\"y_test shape: {y_test.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:36:30.435536Z","iopub.execute_input":"2025-02-28T18:36:30.435927Z","iopub.status.idle":"2025-02-28T18:36:31.341411Z","shell.execute_reply.started":"2025-02-28T18:36:30.435899Z","shell.execute_reply":"2025-02-28T18:36:31.340629Z"}},"outputs":[{"name":"stdout","text":"X_train shape: (126, 128, 9)\ny_train shape: (126, 6)\nX_test shape: (54, 128, 9)\ny_test shape: (54, 6)\n","output_type":"stream"}],"execution_count":71},{"cell_type":"markdown","source":"## Data Loading and Preprocessing\n\n* Loaded data in numpy arrays\n* converted y to y catagorical to make them as independent vectors","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:36:35.606511Z","iopub.execute_input":"2025-02-28T18:36:35.606864Z","iopub.status.idle":"2025-02-28T18:36:35.610862Z","shell.execute_reply.started":"2025-02-28T18:36:35.606818Z","shell.execute_reply":"2025-02-28T18:36:35.609707Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"\n\nlstm_model = Sequential([\n    LSTM(64, return_sequences=True, input_shape=(128, 9)),\n    Dropout(0.2),\n    LSTM(64),\n    Dropout(0.2),\n    Dense(32, activation='relu'),\n    Dense(6, activation='softmax')  # 6 activity classes\n])\n\nlstm_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the LSTM Model\nlstm_model.fit(X_train, y_train, epochs=150, batch_size=64, validation_data=(X_test, y_test))\n\n# Evaluate Model\nloss, acc = lstm_model.evaluate(X_test, y_test)\nprint(f\"LSTM Test Accuracy: {acc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:37:39.838997Z","iopub.execute_input":"2025-02-28T18:37:39.839286Z","iopub.status.idle":"2025-02-28T18:37:53.580911Z","shell.execute_reply.started":"2025-02-28T18:37:39.839265Z","shell.execute_reply":"2025-02-28T18:37:53.580223Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/150\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 317ms/step - accuracy: 0.2476 - loss: 1.7724 - val_accuracy: 0.3889 - val_loss: 1.7480\nEpoch 2/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - accuracy: 0.4211 - loss: 1.7364 - val_accuracy: 0.5370 - val_loss: 1.7104\nEpoch 3/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.5052 - loss: 1.6913 - val_accuracy: 0.5185 - val_loss: 1.6636\nEpoch 4/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.4841 - loss: 1.6368 - val_accuracy: 0.4259 - val_loss: 1.6070\nEpoch 5/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step - accuracy: 0.4211 - loss: 1.5863 - val_accuracy: 0.4630 - val_loss: 1.5358\nEpoch 6/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step - accuracy: 0.4158 - loss: 1.4801 - val_accuracy: 0.4815 - val_loss: 1.4539\nEpoch 7/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step - accuracy: 0.4843 - loss: 1.4198 - val_accuracy: 0.5370 - val_loss: 1.3708\nEpoch 8/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.5001 - loss: 1.3807 - val_accuracy: 0.4259 - val_loss: 1.3018\nEpoch 9/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.4895 - loss: 1.2743 - val_accuracy: 0.4630 - val_loss: 1.2302\nEpoch 10/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.5472 - loss: 1.2247 - val_accuracy: 0.5556 - val_loss: 1.1601\nEpoch 11/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.5683 - loss: 1.1507 - val_accuracy: 0.6111 - val_loss: 1.1230\nEpoch 12/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.5580 - loss: 1.1193 - val_accuracy: 0.6296 - val_loss: 1.0695\nEpoch 13/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.5685 - loss: 1.0711 - val_accuracy: 0.6481 - val_loss: 1.0246\nEpoch 14/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6422 - loss: 0.9832 - val_accuracy: 0.6481 - val_loss: 0.9999\nEpoch 15/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6106 - loss: 0.9940 - val_accuracy: 0.6667 - val_loss: 0.9595\nEpoch 16/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.6367 - loss: 0.9258 - val_accuracy: 0.6481 - val_loss: 0.9413\nEpoch 17/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.6629 - loss: 0.9155 - val_accuracy: 0.6481 - val_loss: 0.9275\nEpoch 18/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6633 - loss: 0.8838 - val_accuracy: 0.6852 - val_loss: 0.9089\nEpoch 19/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.6686 - loss: 0.8856 - val_accuracy: 0.6667 - val_loss: 0.9144\nEpoch 20/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.6841 - loss: 0.8469 - val_accuracy: 0.6667 - val_loss: 0.8670\nEpoch 21/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.6946 - loss: 0.7922 - val_accuracy: 0.6667 - val_loss: 0.8537\nEpoch 22/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7368 - loss: 0.7631 - val_accuracy: 0.6852 - val_loss: 0.8963\nEpoch 23/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.6474 - loss: 0.8210 - val_accuracy: 0.6667 - val_loss: 0.8597\nEpoch 24/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 52ms/step - accuracy: 0.6787 - loss: 0.7481 - val_accuracy: 0.6296 - val_loss: 0.8511\nEpoch 25/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step - accuracy: 0.7366 - loss: 0.6985 - val_accuracy: 0.6852 - val_loss: 0.8086\nEpoch 26/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step - accuracy: 0.7103 - loss: 0.6961 - val_accuracy: 0.6481 - val_loss: 0.8256\nEpoch 27/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step - accuracy: 0.7263 - loss: 0.7275 - val_accuracy: 0.7222 - val_loss: 0.7772\nEpoch 28/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.8051 - loss: 0.6094 - val_accuracy: 0.6667 - val_loss: 0.8643\nEpoch 29/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 51ms/step - accuracy: 0.7316 - loss: 0.6824 - val_accuracy: 0.6852 - val_loss: 0.8032\nEpoch 30/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.7527 - loss: 0.6324 - val_accuracy: 0.7222 - val_loss: 0.7338\nEpoch 31/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.7579 - loss: 0.6236 - val_accuracy: 0.7963 - val_loss: 0.6949\nEpoch 32/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.7317 - loss: 0.6275 - val_accuracy: 0.7037 - val_loss: 0.7151\nEpoch 33/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.7737 - loss: 0.5529 - val_accuracy: 0.7963 - val_loss: 0.7407\nEpoch 34/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.8155 - loss: 0.5849 - val_accuracy: 0.7963 - val_loss: 0.7287\nEpoch 35/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - accuracy: 0.7946 - loss: 0.5631 - val_accuracy: 0.7593 - val_loss: 0.6936\nEpoch 36/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step - accuracy: 0.8050 - loss: 0.5138 - val_accuracy: 0.7407 - val_loss: 0.7355\nEpoch 37/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7948 - loss: 0.5041 - val_accuracy: 0.7222 - val_loss: 0.7612\nEpoch 38/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.7788 - loss: 0.5582 - val_accuracy: 0.7778 - val_loss: 0.6985\nEpoch 39/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step - accuracy: 0.7842 - loss: 0.5358 - val_accuracy: 0.8333 - val_loss: 0.6316\nEpoch 40/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.8313 - loss: 0.4843 - val_accuracy: 0.7963 - val_loss: 0.6533\nEpoch 41/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.8052 - loss: 0.5328 - val_accuracy: 0.8333 - val_loss: 0.6364\nEpoch 42/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8263 - loss: 0.4970 - val_accuracy: 0.8519 - val_loss: 0.6427\nEpoch 43/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8681 - loss: 0.4388 - val_accuracy: 0.8333 - val_loss: 0.6205\nEpoch 44/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8580 - loss: 0.4416 - val_accuracy: 0.7778 - val_loss: 0.6385\nEpoch 45/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8630 - loss: 0.4021 - val_accuracy: 0.7778 - val_loss: 0.6550\nEpoch 46/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8527 - loss: 0.4582 - val_accuracy: 0.7778 - val_loss: 0.6470\nEpoch 47/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8894 - loss: 0.3968 - val_accuracy: 0.7778 - val_loss: 0.6446\nEpoch 48/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8947 - loss: 0.3569 - val_accuracy: 0.8148 - val_loss: 0.6388\nEpoch 49/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8631 - loss: 0.3766 - val_accuracy: 0.8148 - val_loss: 0.6136\nEpoch 50/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8528 - loss: 0.3744 - val_accuracy: 0.7963 - val_loss: 0.6624\nEpoch 51/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8581 - loss: 0.3678 - val_accuracy: 0.7963 - val_loss: 0.6728\nEpoch 52/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8841 - loss: 0.3857 - val_accuracy: 0.8148 - val_loss: 0.6304\nEpoch 53/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9053 - loss: 0.3096 - val_accuracy: 0.7963 - val_loss: 0.6295\nEpoch 54/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.8842 - loss: 0.3044 - val_accuracy: 0.7778 - val_loss: 0.6347\nEpoch 55/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8896 - loss: 0.3266 - val_accuracy: 0.7593 - val_loss: 0.7063\nEpoch 56/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9210 - loss: 0.2724 - val_accuracy: 0.8148 - val_loss: 0.6503\nEpoch 57/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9107 - loss: 0.2883 - val_accuracy: 0.7963 - val_loss: 0.6097\nEpoch 58/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9210 - loss: 0.2767 - val_accuracy: 0.7963 - val_loss: 0.5706\nEpoch 59/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9527 - loss: 0.2382 - val_accuracy: 0.7778 - val_loss: 0.6611\nEpoch 60/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9052 - loss: 0.2641 - val_accuracy: 0.8148 - val_loss: 0.6295\nEpoch 61/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9105 - loss: 0.2341 - val_accuracy: 0.8148 - val_loss: 0.6623\nEpoch 62/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9420 - loss: 0.2208 - val_accuracy: 0.7407 - val_loss: 0.7275\nEpoch 63/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9157 - loss: 0.2710 - val_accuracy: 0.8333 - val_loss: 0.6044\nEpoch 64/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.9210 - loss: 0.2106 - val_accuracy: 0.8148 - val_loss: 0.6098\nEpoch 65/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9001 - loss: 0.2456 - val_accuracy: 0.8148 - val_loss: 0.6704\nEpoch 66/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9579 - loss: 0.1672 - val_accuracy: 0.7778 - val_loss: 0.7080\nEpoch 67/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.9579 - loss: 0.1604 - val_accuracy: 0.8148 - val_loss: 0.6877\nEpoch 68/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9210 - loss: 0.2500 - val_accuracy: 0.7963 - val_loss: 0.6798\nEpoch 69/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.9422 - loss: 0.1519 - val_accuracy: 0.7407 - val_loss: 0.8078\nEpoch 70/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9315 - loss: 0.1869 - val_accuracy: 0.8148 - val_loss: 0.6524\nEpoch 71/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9421 - loss: 0.1967 - val_accuracy: 0.8333 - val_loss: 0.5619\nEpoch 72/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9054 - loss: 0.2081 - val_accuracy: 0.7037 - val_loss: 1.0561\nEpoch 73/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.8737 - loss: 0.3644 - val_accuracy: 0.7037 - val_loss: 0.9321\nEpoch 74/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8843 - loss: 0.3277 - val_accuracy: 0.8148 - val_loss: 0.6593\nEpoch 75/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9157 - loss: 0.2863 - val_accuracy: 0.8148 - val_loss: 0.6489\nEpoch 76/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9159 - loss: 0.2634 - val_accuracy: 0.8519 - val_loss: 0.5902\nEpoch 77/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9105 - loss: 0.2138 - val_accuracy: 0.7963 - val_loss: 0.6680\nEpoch 78/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9315 - loss: 0.1581 - val_accuracy: 0.7963 - val_loss: 0.6689\nEpoch 79/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9370 - loss: 0.1832 - val_accuracy: 0.7963 - val_loss: 0.6246\nEpoch 80/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9736 - loss: 0.1429 - val_accuracy: 0.8148 - val_loss: 0.6628\nEpoch 81/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9420 - loss: 0.1907 - val_accuracy: 0.7963 - val_loss: 0.7364\nEpoch 82/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9474 - loss: 0.1991 - val_accuracy: 0.8333 - val_loss: 0.6951\nEpoch 83/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9367 - loss: 0.2705 - val_accuracy: 0.8333 - val_loss: 0.6850\nEpoch 84/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9789 - loss: 0.0995 - val_accuracy: 0.7778 - val_loss: 0.7550\nEpoch 85/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9421 - loss: 0.1461 - val_accuracy: 0.8333 - val_loss: 0.6901\nEpoch 86/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9790 - loss: 0.1094 - val_accuracy: 0.7963 - val_loss: 0.6437\nEpoch 87/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9421 - loss: 0.1803 - val_accuracy: 0.8148 - val_loss: 0.6053\nEpoch 88/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9420 - loss: 0.1426 - val_accuracy: 0.7963 - val_loss: 0.6419\nEpoch 89/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9474 - loss: 0.1769 - val_accuracy: 0.7778 - val_loss: 0.7902\nEpoch 90/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9841 - loss: 0.0930 - val_accuracy: 0.7963 - val_loss: 0.7140\nEpoch 91/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9894 - loss: 0.0972 - val_accuracy: 0.7963 - val_loss: 0.7393\nEpoch 92/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9947 - loss: 0.0853 - val_accuracy: 0.7593 - val_loss: 0.7699\nEpoch 93/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.9789 - loss: 0.0790 - val_accuracy: 0.7963 - val_loss: 0.7111\nEpoch 94/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9579 - loss: 0.1093 - val_accuracy: 0.8333 - val_loss: 0.5294\nEpoch 95/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9894 - loss: 0.0763 - val_accuracy: 0.8333 - val_loss: 0.5483\nEpoch 96/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9630 - loss: 0.1346 - val_accuracy: 0.8333 - val_loss: 0.6301\nEpoch 97/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9314 - loss: 0.1931 - val_accuracy: 0.7778 - val_loss: 0.6945\nEpoch 98/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9156 - loss: 0.3109 - val_accuracy: 0.7593 - val_loss: 1.1237\nEpoch 99/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 0.8581 - loss: 0.3843 - val_accuracy: 0.8148 - val_loss: 0.6261\nEpoch 100/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9158 - loss: 0.2130 - val_accuracy: 0.8333 - val_loss: 0.6320\nEpoch 101/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9211 - loss: 0.2206 - val_accuracy: 0.8333 - val_loss: 0.6197\nEpoch 102/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9053 - loss: 0.2249 - val_accuracy: 0.7963 - val_loss: 0.7794\nEpoch 103/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9420 - loss: 0.1705 - val_accuracy: 0.7778 - val_loss: 0.8169\nEpoch 104/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9211 - loss: 0.1993 - val_accuracy: 0.7778 - val_loss: 0.6497\nEpoch 105/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9631 - loss: 0.1172 - val_accuracy: 0.7778 - val_loss: 0.6508\nEpoch 106/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9474 - loss: 0.1389 - val_accuracy: 0.7963 - val_loss: 0.6615\nEpoch 107/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.9526 - loss: 0.1421 - val_accuracy: 0.7963 - val_loss: 0.6969\nEpoch 108/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - accuracy: 0.9422 - loss: 0.1622 - val_accuracy: 0.7963 - val_loss: 0.7270\nEpoch 109/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.9736 - loss: 0.0993 - val_accuracy: 0.7963 - val_loss: 0.7327\nEpoch 110/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9579 - loss: 0.1035 - val_accuracy: 0.7963 - val_loss: 0.7472\nEpoch 111/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9369 - loss: 0.1440 - val_accuracy: 0.7963 - val_loss: 0.7230\nEpoch 112/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9842 - loss: 0.0762 - val_accuracy: 0.7963 - val_loss: 0.7065\nEpoch 113/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9842 - loss: 0.0654 - val_accuracy: 0.7963 - val_loss: 0.6840\nEpoch 114/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.9790 - loss: 0.0727 - val_accuracy: 0.8333 - val_loss: 0.6215\nEpoch 115/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9895 - loss: 0.0572 - val_accuracy: 0.8519 - val_loss: 0.5823\nEpoch 116/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0368 - val_accuracy: 0.8519 - val_loss: 0.5762\nEpoch 117/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.9789 - loss: 0.0509 - val_accuracy: 0.8519 - val_loss: 0.5717\nEpoch 118/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.9947 - loss: 0.0402 - val_accuracy: 0.8333 - val_loss: 0.6104\nEpoch 119/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9737 - loss: 0.0738 - val_accuracy: 0.8519 - val_loss: 0.5721\nEpoch 120/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9842 - loss: 0.0467 - val_accuracy: 0.8519 - val_loss: 0.5717\nEpoch 121/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9842 - loss: 0.0695 - val_accuracy: 0.8519 - val_loss: 0.5682\nEpoch 122/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.9790 - loss: 0.0516 - val_accuracy: 0.8148 - val_loss: 0.6820\nEpoch 123/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9894 - loss: 0.0504 - val_accuracy: 0.7778 - val_loss: 0.7578\nEpoch 124/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9894 - loss: 0.0415 - val_accuracy: 0.8148 - val_loss: 0.6761\nEpoch 125/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9894 - loss: 0.0392 - val_accuracy: 0.8519 - val_loss: 0.5776\nEpoch 126/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9685 - loss: 0.0616 - val_accuracy: 0.8519 - val_loss: 0.5623\nEpoch 127/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9895 - loss: 0.0432 - val_accuracy: 0.8519 - val_loss: 0.5570\nEpoch 128/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step - accuracy: 1.0000 - loss: 0.0374 - val_accuracy: 0.8704 - val_loss: 0.5454\nEpoch 129/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9947 - loss: 0.0255 - val_accuracy: 0.8704 - val_loss: 0.5267\nEpoch 130/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9895 - loss: 0.0353 - val_accuracy: 0.8704 - val_loss: 0.5215\nEpoch 131/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9895 - loss: 0.0321 - val_accuracy: 0.8704 - val_loss: 0.5210\nEpoch 132/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0255 - val_accuracy: 0.8519 - val_loss: 0.5325\nEpoch 133/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0304 - val_accuracy: 0.8519 - val_loss: 0.5974\nEpoch 134/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0205 - val_accuracy: 0.8519 - val_loss: 0.6132\nEpoch 135/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0193 - val_accuracy: 0.8519 - val_loss: 0.6203\nEpoch 136/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 1.0000 - loss: 0.0215 - val_accuracy: 0.8519 - val_loss: 0.6241\nEpoch 137/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0238 - val_accuracy: 0.8519 - val_loss: 0.6257\nEpoch 138/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0263 - val_accuracy: 0.8519 - val_loss: 0.6272\nEpoch 139/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0271 - val_accuracy: 0.8519 - val_loss: 0.6288\nEpoch 140/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0228 - val_accuracy: 0.8519 - val_loss: 0.6308\nEpoch 141/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9895 - loss: 0.0277 - val_accuracy: 0.8519 - val_loss: 0.6311\nEpoch 142/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0223 - val_accuracy: 0.8519 - val_loss: 0.6295\nEpoch 143/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0171 - val_accuracy: 0.8519 - val_loss: 0.6276\nEpoch 144/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0240 - val_accuracy: 0.8519 - val_loss: 0.6267\nEpoch 145/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.9895 - loss: 0.0254 - val_accuracy: 0.8519 - val_loss: 0.6262\nEpoch 146/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0167 - val_accuracy: 0.8519 - val_loss: 0.6257\nEpoch 147/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0237 - val_accuracy: 0.8519 - val_loss: 0.6229\nEpoch 148/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0212 - val_accuracy: 0.8519 - val_loss: 0.6194\nEpoch 149/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0204 - val_accuracy: 0.8519 - val_loss: 0.6145\nEpoch 150/150\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 1.0000 - loss: 0.0158 - val_accuracy: 0.8519 - val_loss: 0.6092\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8283 - loss: 0.6768 \nLSTM Test Accuracy: 0.8519\n","output_type":"stream"}],"execution_count":76},{"cell_type":"code","source":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, classification_report\ny_pred_probs = lstm_model.predict(X_test)  # Assuming model is your trained LSTM\ny_pred = np.argmax(y_pred_probs, axis=1)  # Convert one-hot to class labels\ny_true = np.argmax(y_test, axis=1)  # Convert y_test from one-hot to labels\n\n\ncm = confusion_matrix(y_true, y_pred)\nlabels = list(ACTIVITIES.keys()) \n\nplt.figure(figsize=(8,6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix for LSTM Model')\nplt.show()\n\n# Step 4: Print classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred, target_names=labels))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:38:15.527996Z","iopub.execute_input":"2025-02-28T18:38:15.528443Z","iopub.status.idle":"2025-02-28T18:38:16.268495Z","shell.execute_reply.started":"2025-02-28T18:38:15.528409Z","shell.execute_reply":"2025-02-28T18:38:16.267685Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 177ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Classification Report:\n                    precision    recall  f1-score   support\n\n           WALKING       0.62      0.89      0.73         9\n  WALKING_UPSTAIRS       0.83      0.56      0.67         9\nWALKING_DOWNSTAIRS       1.00      0.78      0.88         9\n           SITTING       1.00      0.89      0.94         9\n          STANDING       0.82      1.00      0.90         9\n            LAYING       1.00      1.00      1.00         9\n\n          accuracy                           0.85        54\n         macro avg       0.88      0.85      0.85        54\n      weighted avg       0.88      0.85      0.85        54\n\n","output_type":"stream"}],"execution_count":77},{"cell_type":"markdown","source":"## LSTM observations\nLSTMs are particularly useful for time-series and sequential data like our HAR (Human Activity Recognition) dataset, where past sensor readings influence future predictions.\n\nThe model performs very well despite less training features because it keeps track of previous data and then updates the parameters this helps to learn important features","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten\n\n# Build 1D CNN Model\ncnn_model = Sequential([\n    Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(128, 9)),\n    MaxPooling1D(pool_size=2),\n    Conv1D(filters=128, kernel_size=3, activation='relu'),\n    MaxPooling1D(pool_size=2),\n    Flatten(),\n    Dense(64, activation='relu'),\n    Dropout(0.5),\n    Dense(6, activation='softmax')\n])\n\ncnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the 1D CNN Model\ncnn_model.fit(X_train, y_train, epochs=150, batch_size=32, validation_data=(X_test, y_test))\n\n# Evaluate Model\nloss, acc = cnn_model.evaluate(X_test, y_test)\nprint(f\"1D CNN Test Accuracy: {acc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:38:36.192490Z","iopub.execute_input":"2025-02-28T18:38:36.192829Z","iopub.status.idle":"2025-02-28T18:38:49.128158Z","shell.execute_reply.started":"2025-02-28T18:38:36.192763Z","shell.execute_reply":"2025-02-28T18:38:49.127488Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 800ms/step - accuracy: 0.2224 - loss: 1.7709 - val_accuracy: 0.4815 - val_loss: 1.5039\nEpoch 2/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.4770 - loss: 1.4303 - val_accuracy: 0.5185 - val_loss: 1.2583\nEpoch 3/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.5909 - loss: 1.1475 - val_accuracy: 0.6296 - val_loss: 1.0650\nEpoch 4/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.6374 - loss: 1.0159 - val_accuracy: 0.6481 - val_loss: 0.9711\nEpoch 5/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7619 - loss: 0.8125 - val_accuracy: 0.7963 - val_loss: 0.8379\nEpoch 6/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7128 - loss: 0.8153 - val_accuracy: 0.7222 - val_loss: 0.7961\nEpoch 7/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7358 - loss: 0.7122 - val_accuracy: 0.7778 - val_loss: 0.7596\nEpoch 8/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7998 - loss: 0.5642 - val_accuracy: 0.8148 - val_loss: 0.7115\nEpoch 9/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8209 - loss: 0.5434 - val_accuracy: 0.8148 - val_loss: 0.6612\nEpoch 10/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8301 - loss: 0.4614 - val_accuracy: 0.8333 - val_loss: 0.6895\nEpoch 11/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8502 - loss: 0.4629 - val_accuracy: 0.7963 - val_loss: 0.6399\nEpoch 12/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8606 - loss: 0.3862 - val_accuracy: 0.8333 - val_loss: 0.6088\nEpoch 13/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8713 - loss: 0.3432 - val_accuracy: 0.8519 - val_loss: 0.6250\nEpoch 14/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9329 - loss: 0.2805 - val_accuracy: 0.8333 - val_loss: 0.6598\nEpoch 15/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8983 - loss: 0.2861 - val_accuracy: 0.8148 - val_loss: 0.6322\nEpoch 16/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9025 - loss: 0.2712 - val_accuracy: 0.8148 - val_loss: 0.6271\nEpoch 17/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9246 - loss: 0.2379 - val_accuracy: 0.7778 - val_loss: 0.6276\nEpoch 18/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8995 - loss: 0.2993 - val_accuracy: 0.8333 - val_loss: 0.6932\nEpoch 19/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9256 - loss: 0.2029 - val_accuracy: 0.8333 - val_loss: 0.6799\nEpoch 20/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9340 - loss: 0.1923 - val_accuracy: 0.8333 - val_loss: 0.6485\nEpoch 21/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9748 - loss: 0.1303 - val_accuracy: 0.8333 - val_loss: 0.6615\nEpoch 22/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9570 - loss: 0.1417 - val_accuracy: 0.8333 - val_loss: 0.7131\nEpoch 23/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9329 - loss: 0.1627 - val_accuracy: 0.8148 - val_loss: 0.7711\nEpoch 24/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9539 - loss: 0.1524 - val_accuracy: 0.8519 - val_loss: 0.7611\nEpoch 25/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9801 - loss: 0.1217 - val_accuracy: 0.8333 - val_loss: 0.7432\nEpoch 26/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9539 - loss: 0.1452 - val_accuracy: 0.8333 - val_loss: 0.7102\nEpoch 27/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9790 - loss: 0.0834 - val_accuracy: 0.8333 - val_loss: 0.6905\nEpoch 28/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9769 - loss: 0.0754 - val_accuracy: 0.8519 - val_loss: 0.7396\nEpoch 29/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9801 - loss: 0.0854 - val_accuracy: 0.8519 - val_loss: 0.7817\nEpoch 30/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9769 - loss: 0.0907 - val_accuracy: 0.8148 - val_loss: 0.7271\nEpoch 31/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9937 - loss: 0.0808 - val_accuracy: 0.8519 - val_loss: 0.6624\nEpoch 32/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0499 - val_accuracy: 0.8519 - val_loss: 0.6605\nEpoch 33/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9706 - loss: 0.0911 - val_accuracy: 0.8148 - val_loss: 0.7085\nEpoch 34/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9864 - loss: 0.0535 - val_accuracy: 0.8333 - val_loss: 0.7590\nEpoch 35/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9602 - loss: 0.0982 - val_accuracy: 0.7963 - val_loss: 0.7670\nEpoch 36/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0768 - val_accuracy: 0.8148 - val_loss: 0.6861\nEpoch 37/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9738 - loss: 0.1147 - val_accuracy: 0.8333 - val_loss: 0.7483\nEpoch 38/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0615 - val_accuracy: 0.8333 - val_loss: 0.8369\nEpoch 39/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9937 - loss: 0.0404 - val_accuracy: 0.8519 - val_loss: 0.8599\nEpoch 40/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.0257 - val_accuracy: 0.8333 - val_loss: 0.8056\nEpoch 41/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9916 - loss: 0.0378 - val_accuracy: 0.8333 - val_loss: 0.7939\nEpoch 42/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9832 - loss: 0.0561 - val_accuracy: 0.8148 - val_loss: 0.8518\nEpoch 43/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9624 - loss: 0.0895 - val_accuracy: 0.8148 - val_loss: 0.9043\nEpoch 44/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9738 - loss: 0.0537 - val_accuracy: 0.8333 - val_loss: 0.9262\nEpoch 45/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0214 - val_accuracy: 0.8148 - val_loss: 1.0198\nEpoch 46/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9822 - loss: 0.0557 - val_accuracy: 0.8148 - val_loss: 1.0090\nEpoch 47/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9770 - loss: 0.0453 - val_accuracy: 0.8519 - val_loss: 0.8758\nEpoch 48/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.0423 - val_accuracy: 0.8333 - val_loss: 0.8547\nEpoch 49/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9654 - loss: 0.0776 - val_accuracy: 0.8519 - val_loss: 0.8570\nEpoch 50/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0377 - val_accuracy: 0.8519 - val_loss: 0.9130\nEpoch 51/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0610 - val_accuracy: 0.7963 - val_loss: 0.9570\nEpoch 52/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9822 - loss: 0.0503 - val_accuracy: 0.8519 - val_loss: 0.9537\nEpoch 53/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0498 - val_accuracy: 0.8519 - val_loss: 0.9357\nEpoch 54/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9801 - loss: 0.0570 - val_accuracy: 0.8519 - val_loss: 0.9310\nEpoch 55/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0371 - val_accuracy: 0.8148 - val_loss: 0.9070\nEpoch 56/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9895 - loss: 0.0294 - val_accuracy: 0.8333 - val_loss: 0.9302\nEpoch 57/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0339 - val_accuracy: 0.8519 - val_loss: 1.0060\nEpoch 58/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0279 - val_accuracy: 0.8148 - val_loss: 1.1076\nEpoch 59/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0261 - val_accuracy: 0.8333 - val_loss: 1.1321\nEpoch 60/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9854 - loss: 0.0390 - val_accuracy: 0.8333 - val_loss: 1.0735\nEpoch 61/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9758 - loss: 0.0464 - val_accuracy: 0.8333 - val_loss: 1.0595\nEpoch 62/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0141 - val_accuracy: 0.8333 - val_loss: 1.0945\nEpoch 63/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0412 - val_accuracy: 0.8333 - val_loss: 1.1928\nEpoch 64/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0441 - val_accuracy: 0.8333 - val_loss: 1.1775\nEpoch 65/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0389 - val_accuracy: 0.8333 - val_loss: 1.1417\nEpoch 66/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9864 - loss: 0.0390 - val_accuracy: 0.8333 - val_loss: 1.0940\nEpoch 67/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0179 - val_accuracy: 0.8519 - val_loss: 1.1216\nEpoch 68/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0088 - val_accuracy: 0.8333 - val_loss: 1.1800\nEpoch 69/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0395 - val_accuracy: 0.8519 - val_loss: 1.1614\nEpoch 70/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0080 - val_accuracy: 0.8333 - val_loss: 1.1599\nEpoch 71/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0102 - val_accuracy: 0.8333 - val_loss: 1.1566\nEpoch 72/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0225 - val_accuracy: 0.8519 - val_loss: 1.1762\nEpoch 73/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9770 - loss: 0.0414 - val_accuracy: 0.8519 - val_loss: 1.2432\nEpoch 74/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0261 - val_accuracy: 0.8148 - val_loss: 1.3114\nEpoch 75/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9854 - loss: 0.0218 - val_accuracy: 0.8333 - val_loss: 1.3171\nEpoch 76/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0226 - val_accuracy: 0.8519 - val_loss: 1.3234\nEpoch 77/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0087 - val_accuracy: 0.8519 - val_loss: 1.3427\nEpoch 78/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9822 - loss: 0.0317 - val_accuracy: 0.8519 - val_loss: 1.3745\nEpoch 79/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0029 - val_accuracy: 0.8519 - val_loss: 1.3677\nEpoch 80/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.0157 - val_accuracy: 0.8519 - val_loss: 1.3485\nEpoch 81/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9916 - loss: 0.0170 - val_accuracy: 0.8519 - val_loss: 1.3340\nEpoch 82/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0118 - val_accuracy: 0.8333 - val_loss: 1.3460\nEpoch 83/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0134 - val_accuracy: 0.8148 - val_loss: 1.3321\nEpoch 84/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0203 - val_accuracy: 0.8148 - val_loss: 1.3339\nEpoch 85/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9916 - loss: 0.0402 - val_accuracy: 0.8704 - val_loss: 1.2660\nEpoch 86/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0152 - val_accuracy: 0.8519 - val_loss: 1.1936\nEpoch 87/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0090 - val_accuracy: 0.8519 - val_loss: 1.1801\nEpoch 88/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.0154 - val_accuracy: 0.8519 - val_loss: 1.1975\nEpoch 89/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0203 - val_accuracy: 0.8519 - val_loss: 1.2103\nEpoch 90/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9968 - loss: 0.0293 - val_accuracy: 0.8519 - val_loss: 1.2366\nEpoch 91/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0056 - val_accuracy: 0.8519 - val_loss: 1.2419\nEpoch 92/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.0118 - val_accuracy: 0.8519 - val_loss: 1.2733\nEpoch 93/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0115 - val_accuracy: 0.8519 - val_loss: 1.2928\nEpoch 94/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0079 - val_accuracy: 0.8519 - val_loss: 1.3129\nEpoch 95/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0156 - val_accuracy: 0.8519 - val_loss: 1.2198\nEpoch 96/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0066 - val_accuracy: 0.8519 - val_loss: 1.0880\nEpoch 97/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0147 - val_accuracy: 0.8704 - val_loss: 1.0431\nEpoch 98/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0083 - val_accuracy: 0.8148 - val_loss: 1.0648\nEpoch 99/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0192 - val_accuracy: 0.8333 - val_loss: 1.1205\nEpoch 100/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0164 - val_accuracy: 0.8333 - val_loss: 1.1670\nEpoch 101/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9864 - loss: 0.0302 - val_accuracy: 0.8333 - val_loss: 1.1979\nEpoch 102/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0086 - val_accuracy: 0.8519 - val_loss: 1.2126\nEpoch 103/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9770 - loss: 0.0298 - val_accuracy: 0.8519 - val_loss: 1.2212\nEpoch 104/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0092 - val_accuracy: 0.8519 - val_loss: 1.2141\nEpoch 105/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9822 - loss: 0.0259 - val_accuracy: 0.8519 - val_loss: 1.2062\nEpoch 106/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0245 - val_accuracy: 0.8519 - val_loss: 1.2140\nEpoch 107/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0171 - val_accuracy: 0.8519 - val_loss: 1.2683\nEpoch 108/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9853 - loss: 0.0249 - val_accuracy: 0.8519 - val_loss: 1.3649\nEpoch 109/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0202 - val_accuracy: 0.8519 - val_loss: 1.3486\nEpoch 110/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0184 - val_accuracy: 0.8519 - val_loss: 1.3057\nEpoch 111/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0180 - val_accuracy: 0.8519 - val_loss: 1.2779\nEpoch 112/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0207 - val_accuracy: 0.8333 - val_loss: 1.1976\nEpoch 113/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0139 - val_accuracy: 0.8333 - val_loss: 1.1426\nEpoch 114/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0269 - val_accuracy: 0.8519 - val_loss: 1.1479\nEpoch 115/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - loss: 0.0062 - val_accuracy: 0.8519 - val_loss: 1.1647\nEpoch 116/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9864 - loss: 0.0422 - val_accuracy: 0.8519 - val_loss: 1.1614\nEpoch 117/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0166 - val_accuracy: 0.8333 - val_loss: 1.1604\nEpoch 118/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9529 - loss: 0.0932 - val_accuracy: 0.8333 - val_loss: 1.2806\nEpoch 119/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0065 - val_accuracy: 0.8148 - val_loss: 1.3703\nEpoch 120/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 1.0000 - loss: 0.0161 - val_accuracy: 0.8519 - val_loss: 1.3953\nEpoch 121/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0362 - val_accuracy: 0.8519 - val_loss: 1.3851\nEpoch 122/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0133 - val_accuracy: 0.8333 - val_loss: 1.4087\nEpoch 123/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9884 - loss: 0.0236 - val_accuracy: 0.8333 - val_loss: 1.4463\nEpoch 124/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0156 - val_accuracy: 0.8333 - val_loss: 1.4738\nEpoch 125/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9854 - loss: 0.0247 - val_accuracy: 0.8519 - val_loss: 1.4938\nEpoch 126/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9801 - loss: 0.0253 - val_accuracy: 0.8519 - val_loss: 1.5020\nEpoch 127/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0081 - val_accuracy: 0.8519 - val_loss: 1.4945\nEpoch 128/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0135 - val_accuracy: 0.8519 - val_loss: 1.5124\nEpoch 129/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0107 - val_accuracy: 0.8333 - val_loss: 1.5760\nEpoch 130/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9884 - loss: 0.0249 - val_accuracy: 0.8333 - val_loss: 1.6851\nEpoch 131/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9916 - loss: 0.0225 - val_accuracy: 0.7963 - val_loss: 1.7585\nEpoch 132/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0136 - val_accuracy: 0.8333 - val_loss: 1.6885\nEpoch 133/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.9738 - loss: 0.0434 - val_accuracy: 0.8519 - val_loss: 1.4808\nEpoch 134/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9749 - loss: 0.0351 - val_accuracy: 0.8519 - val_loss: 1.3570\nEpoch 135/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0105 - val_accuracy: 0.8519 - val_loss: 1.3547\nEpoch 136/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9947 - loss: 0.0171 - val_accuracy: 0.8519 - val_loss: 1.3936\nEpoch 137/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 0.8519 - val_loss: 1.4413\nEpoch 138/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0065 - val_accuracy: 0.8519 - val_loss: 1.4887\nEpoch 139/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0207 - val_accuracy: 0.8519 - val_loss: 1.4288\nEpoch 140/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0076 - val_accuracy: 0.8519 - val_loss: 1.3875\nEpoch 141/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0084 - val_accuracy: 0.8519 - val_loss: 1.3678\nEpoch 142/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0124 - val_accuracy: 0.8519 - val_loss: 1.3801\nEpoch 143/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0123 - val_accuracy: 0.8519 - val_loss: 1.4140\nEpoch 144/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0067 - val_accuracy: 0.8333 - val_loss: 1.5049\nEpoch 145/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9707 - loss: 0.0356 - val_accuracy: 0.8333 - val_loss: 1.4340\nEpoch 146/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9916 - loss: 0.0091 - val_accuracy: 0.8333 - val_loss: 1.4101\nEpoch 147/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0109 - val_accuracy: 0.8519 - val_loss: 1.3707\nEpoch 148/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0082 - val_accuracy: 0.8519 - val_loss: 1.3639\nEpoch 149/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0055 - val_accuracy: 0.8519 - val_loss: 1.3659\nEpoch 150/150\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0035 - val_accuracy: 0.8519 - val_loss: 1.3737\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8283 - loss: 1.5504 \n1D CNN Test Accuracy: 0.8519\n","output_type":"stream"}],"execution_count":79},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"y_pred_probs = cnn_model.predict(X_test)  # Assuming model is your trained LSTM\ny_pred = np.argmax(y_pred_probs, axis=1)  # Convert one-hot to class labels\ny_true = np.argmax(y_test, axis=1)  # Convert y_test from one-hot to labels\n\n\ncm = confusion_matrix(y_true, y_pred)\nlabels = list(ACTIVITIES.keys()) \n\nplt.figure(figsize=(8,6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix for LSTM Model')\nplt.show()\n\n# Step 4: Print classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred, target_names=labels))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:12:34.427665Z","iopub.execute_input":"2025-02-28T18:12:34.428052Z","iopub.status.idle":"2025-02-28T18:12:35.236432Z","shell.execute_reply.started":"2025-02-28T18:12:34.428024Z","shell.execute_reply":"2025-02-28T18:12:35.235705Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 221ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Classification Report:\n                    precision    recall  f1-score   support\n\n           WALKING       0.60      0.33      0.43         9\n  WALKING_UPSTAIRS       0.56      0.56      0.56         9\nWALKING_DOWNSTAIRS       0.86      0.67      0.75         9\n           SITTING       1.00      0.89      0.94         9\n          STANDING       0.56      1.00      0.72         9\n            LAYING       1.00      1.00      1.00         9\n\n          accuracy                           0.74        54\n         macro avg       0.76      0.74      0.73        54\n      weighted avg       0.76      0.74      0.73        54\n\n","output_type":"stream"}],"execution_count":58},{"cell_type":"markdown","source":"## CNN Model\n\nOutput is as better as LSTM as it in CNN it also learns features based on its surrounding elements which help it to create and learn important features","metadata":{}},{"cell_type":"code","source":"%pip install tsfel\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:42:12.424501Z","iopub.execute_input":"2025-02-28T18:42:12.424859Z","iopub.status.idle":"2025-02-28T18:42:15.802425Z","shell.execute_reply.started":"2025-02-28T18:42:12.424835Z","shell.execute_reply":"2025-02-28T18:42:15.801282Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: tsfel in /usr/local/lib/python3.10/dist-packages (0.1.9)\nRequirement already satisfied: ipython>=7.4.0 in /usr/local/lib/python3.10/dist-packages (from tsfel) (7.34.0)\nRequirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.26.4)\nRequirement already satisfied: pandas>=1.5.3 in /usr/local/lib/python3.10/dist-packages (from tsfel) (2.2.3)\nRequirement already satisfied: PyWavelets>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.8.0)\nRequirement already satisfied: requests>=2.31.0 in /usr/local/lib/python3.10/dist-packages (from tsfel) (2.32.3)\nRequirement already satisfied: scikit-learn>=0.21.3 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.2.2)\nRequirement already satisfied: scipy>=1.7.3 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.13.1)\nRequirement already satisfied: setuptools>=47.1.1 in /usr/local/lib/python3.10/dist-packages (from tsfel) (75.1.0)\nRequirement already satisfied: statsmodels>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from tsfel) (0.14.4)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.19.2)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (4.4.2)\nRequirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.7.5)\nRequirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (5.7.1)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (3.0.48)\nRequirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (2.19.1)\nRequirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.2.0)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (4.9.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5.3->tsfel) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5.3->tsfel) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5.3->tsfel) (2025.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (2025.1.31)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.21.3->tsfel) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.21.3->tsfel) (3.5.0)\nRequirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.12.0->tsfel) (1.0.1)\nRequirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.12.0->tsfel) (24.2)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=7.4.0->tsfel) (0.8.4)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=7.4.0->tsfel) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=7.4.0->tsfel) (0.2.13)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.5.3->tsfel) (1.17.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.18.5->tsfel) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.18.5->tsfel) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.18.5->tsfel) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.18.5->tsfel) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.18.5->tsfel) (2024.2.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":80},{"cell_type":"markdown","source":"## TSFEL\nInstalled Tsfel\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tsfel\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:42:16.407620Z","iopub.execute_input":"2025-02-28T18:42:16.408108Z","iopub.status.idle":"2025-02-28T18:42:16.414494Z","shell.execute_reply.started":"2025-02-28T18:42:16.408064Z","shell.execute_reply":"2025-02-28T18:42:16.413407Z"}},"outputs":[],"execution_count":81},{"cell_type":"code","source":"\ncfg = tsfel.get_features_by_domain()\n\n# Function to extract features using TSFEL\ndef extract_features(X):\n    feature_list = []\n    for sample in X:\n        columns = ['total_acc_x', 'total_acc_y', 'total_acc_z',\n           'body_acc_x', 'body_acc_y', 'body_acc_z',\n           'body_gyro_x', 'body_gyro_y', 'body_gyro_z']\n\n        df = pd.DataFrame(sample, columns=columns)\n        features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n        feature_list.append(features.values.flatten())  # Convert DF to a single feature vector\n    return np.array(feature_list)\n\n# Extract TSFEL features\nX_train_with_f = extract_features(X_train)\nX_test_with_f = extract_features(X_test)\nprint(X_train_with_f.shape)\nprint(X_test_with_f.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:43:39.202720Z","iopub.execute_input":"2025-02-28T18:43:39.203091Z","iopub.status.idle":"2025-02-28T18:43:55.784333Z","shell.execute_reply.started":"2025-02-28T18:43:39.203062Z","shell.execute_reply":"2025-02-28T18:43:55.783445Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n","output_type":"stream"},{"name":"stdout","text":"(126, 1404)\n(54, 1404)\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-83-bd66a9497c26>:12: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n","output_type":"stream"}],"execution_count":83},{"cell_type":"code","source":"import pandas as pd\ncfg = tsfel.get_features_by_domain()\nall_features = []\nfor domain in cfg.keys():\n    for feature_name in cfg[domain].keys():\n        all_features.append((domain, feature_name))\ndf_features = pd.DataFrame(all_features, columns=['Domain', 'Feature'])\nprint(df_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:43:58.986282Z","iopub.execute_input":"2025-02-28T18:43:58.986603Z","iopub.status.idle":"2025-02-28T18:43:58.996265Z","shell.execute_reply.started":"2025-02-28T18:43:58.986576Z","shell.execute_reply":"2025-02-28T18:43:58.995300Z"}},"outputs":[{"name":"stdout","text":"      Domain                       Feature\n0   spectral  Spectrogram mean coefficient\n1   spectral         Fundamental frequency\n2   spectral            Human range energy\n3   spectral                          LPCC\n4   spectral                          MFCC\n..       ...                           ...\n62   fractal     Higuchi fractal dimension\n63   fractal                Hurst exponent\n64   fractal        Maximum fractal length\n65   fractal   Petrosian fractal dimension\n66   fractal            Multiscale entropy\n\n[67 rows x 2 columns]\n","output_type":"stream"}],"execution_count":84},{"cell_type":"markdown","source":"## TSFEL features\n\nWe can see that tsfel is capable of generaring features such as spectral features (fundamental frequency , peak count), fractal features( like multiscale entropy) , statistical features ( mean, mode, covariance, autovariance)","metadata":{}},{"cell_type":"code","source":"# Normalize features\n# Flatten the time-series data (num_samples, num_timesteps, num_features) → (num_samples, num_timesteps * num_features)\nX_train_flattened = X_train_with_f.reshape(X_train_with_f.shape[0], -1)\nX_test_flattened = X_test_with_f.reshape(X_test_with_f.shape[0], -1)\n\n# Normalize\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train_flattened)\nX_test_scaled = scaler.transform(X_test_flattened)\n\ny_train_categorical = np.argmax(y_train, axis=1)\ny_test_categorical = np.argmax(y_test, axis=1)\n\n# Define models\nmodels = {\n    \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=42),\n    \"SVM\": SVC(kernel='rbf', C=1, gamma='scale'),\n    \"Logistic Regression\": LogisticRegression(max_iter=1000)\n}\n\n# Train and evaluate models\nfor name, model in models.items():\n    model.fit(X_train_scaled, y_train_categorical)\n    y_pred = model.predict(X_test_scaled)\n    acc = accuracy_score(y_test_categorical, y_pred)\n    print(f\"{name} Accuracy: {acc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:44:02.059131Z","iopub.execute_input":"2025-02-28T18:44:02.059464Z","iopub.status.idle":"2025-02-28T18:44:02.631734Z","shell.execute_reply.started":"2025-02-28T18:44:02.059435Z","shell.execute_reply":"2025-02-28T18:44:02.630728Z"}},"outputs":[{"name":"stdout","text":"Random Forest Accuracy: 0.8889\nSVM Accuracy: 0.8704\nLogistic Regression Accuracy: 0.9074\n","output_type":"stream"}],"execution_count":85},{"cell_type":"markdown","source":"## Observations\n* Using TSFEL featurs simple models such as random forest and logistic reggression are giving far better results.\n* Thease features help us to learn complex functions as they are created by using complex equations","metadata":{}},{"cell_type":"code","source":"# Load author-provided features\nX_train_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train/X_train.txt\", delim_whitespace=True, header=None)\nX_test_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/test/X_test.txt\", delim_whitespace=True, header=None)\ny_test_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/test/y_test.txt\", delim_whitespace=True, header=None)\ny_train_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train/y_train.txt\", delim_whitespace=True, header=None)\n\n\n\n# Normalize features\nX_train_author_scaled = scaler.fit_transform(X_train_author)\nX_test_author_scaled = scaler.transform(X_test_author)\nprint(X_train_author_scaled.shape)\nprint(X_test_author.shape)\nprint(y_test_author.shape)\nprint(y_train_author.shape)\n\nfor name, model in models.items():\n    model.fit(X_train_author_scaled, y_train_author)  # Ensure `y_train_categorical` has correct shape\n    y_pred = model.predict(X_test_author_scaled)\n    \n    acc = accuracy_score(y_test_author, y_pred)\n    print(f\"{name} Accuracy: {acc:.4f}\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T18:44:08.637253Z","iopub.execute_input":"2025-02-28T18:44:08.637587Z","iopub.status.idle":"2025-02-28T18:44:32.059065Z","shell.execute_reply.started":"2025-02-28T18:44:08.637556Z","shell.execute_reply":"2025-02-28T18:44:32.057969Z"}},"outputs":[{"name":"stdout","text":"(7352, 561)\n(2947, 561)\n(2947, 1)\n(7352, 1)\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-86-08b41fb21186>:18: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n  model.fit(X_train_author_scaled, y_train_author)  # Ensure `y_train_categorical` has correct shape\n","output_type":"stream"},{"name":"stdout","text":"Random Forest Accuracy: 0.9267\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n","output_type":"stream"},{"name":"stdout","text":"SVM Accuracy: 0.9522\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n","output_type":"stream"},{"name":"stdout","text":"Logistic Regression Accuracy: 0.9545\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}],"execution_count":86},{"cell_type":"markdown","source":"## Observations\n\n* the model trained by using features provided by author has performed better than the model trained on Tsfel features despite it has much less features than Tsfel (561<1401)\n* Also Author features are also same as that of Tsfel like energy, mean and frequency\n* The reason behind this could be overfitting due to these many features in Tsfel\n* Also Tsfel features are randomly generated in large ammounts so there might be many correlated features","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Summary of all the doings\n\n* initially made a train and test set with 9 raw features (ACCx,ACCy,ACCz,GYROx,GYRoy..etc)\n* trained LSTM on it an it gave good results with (88% accuracy on test) which was expected as LSTMS are able to learn sequences and outperform when it comes to timeseries\n* Trained 1DCNN model which also gave good results as LSTM as CNNs are also able to learn patterns in chunk of data\n* Generated Tsfel features and learned Simple models like random forest, SVM and logistic regg which out performed The deep learning methods\n* Learned the same models on autor provided features, which also performed better than TSFel one, which could be possible due to many reasons like , overfitting, correlation between tsfel features etc..","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}