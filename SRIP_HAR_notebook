{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10881873,"sourceType":"datasetVersion","datasetId":6761658}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport pandas as pd\nimport numpy as np\nimport os\n\ndef process_data(base_path, dataset_type=\"Train\"):\n    \"\"\"\n    Process UCI HAR dataset and store combined CSVs.\n    \"\"\"\n    save_dir = os.path.join(\"Combined\", dataset_type)\n    \n    # Dictionary of activities\n    ACTIVITIES = {\n        1: 'WALKING',\n        2: 'WALKING_UPSTAIRS',\n        3: 'WALKING_DOWNSTAIRS',\n        4: 'SITTING',\n        5: 'STANDING',\n        6: 'LAYING',\n    }\n    total_acc_x = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"total_acc_x_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    total_acc_y = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"total_acc_y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    total_acc_z = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"total_acc_z_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    \n    body_acc_x = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_acc_x_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_acc_y = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_acc_y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_acc_z = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_acc_z_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    \n    body_gyro_x = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_gyro_x_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_gyro_y = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_gyro_y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    body_gyro_z = pd.read_csv(os.path.join(base_path, \"Inertial Signals\", f\"body_gyro_z_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n\n    subject_data = pd.read_csv(os.path.join(base_path, f\"subject_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n    y_labels = pd.read_csv(os.path.join(base_path, f\"y_{dataset_type.lower()}.txt\"), delim_whitespace=True, header=None)\n\n    for subject in np.unique(subject_data.values):\n        sub_idxs = np.where(subject_data.iloc[:, 0] == subject)[0]\n        labels = y_labels.loc[sub_idxs]\n        \n        # Process each activity label\n        for label in np.unique(labels.values):\n            activity_path = os.path.join(save_dir, ACTIVITIES[label])\n            os.makedirs(activity_path, exist_ok=True)\n            \n            label_idxs = labels[labels.iloc[:, 0] == label].index\n            \n            accx, accy, accz = [], [], []\n            body_accx, body_accy, body_accz = [], [], []\n            body_gyrox, body_gyroy, body_gyroz = [], [], []\n            \n            for idx in label_idxs:\n                accx = np.hstack((accx, total_acc_x.loc[idx][64:]))\n                accy = np.hstack((accy, total_acc_y.loc[idx][64:]))\n                accz = np.hstack((accz, total_acc_z.loc[idx][64:]))\n                \n                body_accx = np.hstack((body_accx, body_acc_x.loc[idx][64:]))\n                body_accy = np.hstack((body_accy, body_acc_y.loc[idx][64:]))\n                body_accz = np.hstack((body_accz, body_acc_z.loc[idx][64:]))\n                \n                body_gyrox = np.hstack((body_gyrox, body_gyro_x.loc[idx][64:]))\n                body_gyroy = np.hstack((body_gyroy, body_gyro_y.loc[idx][64:]))\n                body_gyroz = np.hstack((body_gyroz, body_gyro_z.loc[idx][64:]))\n                \n            data = pd.DataFrame({\n                'accx': accx, 'accy': accy, 'accz': accz,\n                'body_accx': body_accx, 'body_accy': body_accy, 'body_accz': body_accz,\n                'body_gyrox': body_gyrox, 'body_gyroy': body_gyroy, 'body_gyroz': body_gyroz\n            })\n            save_path = os.path.join(activity_path, f\"Subject_{subject}.csv\")\n            data.to_csv(save_path, index=False)\n    \n    print(f\"Done Combining {dataset_type} data\")\n\ntrain_path = \"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train\"\ntest_path = \"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/test\"\n\nprocess_data(train_path, \"Train\")\nprocess_data(test_path, \"Test\")\nprint(\"Done Combining all data\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:46:26.066536Z","iopub.execute_input":"2025-03-01T07:46:26.066856Z","iopub.status.idle":"2025-03-01T07:46:43.660709Z","shell.execute_reply.started":"2025-03-01T07:46:26.066826Z","shell.execute_reply":"2025-03-01T07:46:43.659936Z"}},"outputs":[{"name":"stdout","text":"Done Combining Train data\nDone Combining Test data\nDone Combining all data\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"## Data Preprocessing\n\nCombined total acceleration in X,Y,Z to create a structured dataset for Human Activity Recognition (HAR). The dataset is divided into training and testing sets, where each subject’s accelerometer readings are categorized based on the performed activity.\n\n* Read accelerometer data from the UCI HAR Dataset.\n* Read corresponding subject IDs and activity labels (y_train.txt, y_test.txt).\n* Combine accelerometer readings along the time axis, removing the first 64 samples as Waste as first few samples could be transition phase\n* Save processed data as CSV files under \"Combined/Train\" and \"Combined/Test\", ensuring each subject's data is stored separately","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nACTIVITIES = {\n    'WALKING': 0,\n    'WALKING_UPSTAIRS': 1,\n    'WALKING_DOWNSTAIRS': 2,\n    'SITTING': 3,\n    'STANDING': 4,\n    'LAYING': 5,\n}\ndef load_data(data_type=\"Train\"):\n    X, y = [], []\n\n    base_path = os.path.join(\"Combined\", data_type)\n    \n    for activity, label in ACTIVITIES.items():\n        activity_path = os.path.join(base_path, activity)\n        \n        for file in os.listdir(activity_path):\n            file_path = os.path.join(activity_path, file)\n            df = pd.read_csv(file_path)\n            if df.shape[0] == 64:\n                df = df.tail(64)\n            elif df.shape[0] > 128:\n                df = df.iloc[:128]  \n            X.append(df.values)\n            y.append(label)\n\n    X = np.array(X)\n    y = np.array(y)\n    y = to_categorical(y, num_classes=len(ACTIVITIES))\n    return X, y\nX_train, y_train = load_data(\"Train\")\nX_test, y_test = load_data(\"Test\")\nprint(f\"X_train shape: {X_train.shape}\")  \nprint(f\"y_train shape: {y_train.shape}\")  \nprint(f\"X_test shape: {X_test.shape}\")\nprint(f\"y_test shape: {y_test.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:46:43.661696Z","iopub.execute_input":"2025-03-01T07:46:43.661991Z","iopub.status.idle":"2025-03-01T07:46:45.120189Z","shell.execute_reply.started":"2025-03-01T07:46:43.661968Z","shell.execute_reply":"2025-03-01T07:46:45.119479Z"}},"outputs":[{"name":"stdout","text":"X_train shape: (126, 128, 9)\ny_train shape: (126, 6)\nX_test shape: (54, 128, 9)\ny_test shape: (54, 6)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"## Data Loading and Preprocessing\n\n* Loaded data in numpy arrays\n* converted y to y catagorical to make them as independent vectors","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:46:45.121907Z","iopub.execute_input":"2025-03-01T07:46:45.122194Z","iopub.status.idle":"2025-03-01T07:46:45.125669Z","shell.execute_reply.started":"2025-03-01T07:46:45.122172Z","shell.execute_reply":"2025-03-01T07:46:45.124930Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"\n\nlstm_model = Sequential([\n    LSTM(64, return_sequences=True, input_shape=(128, 9)),\n    LSTM(64),\n    Dense(32, activation='relu'),\n    Dense(6, activation='softmax')  # 6 activity classes\n])\n\nlstm_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nlstm_model.fit(X_train, y_train, epochs=45, batch_size=64, validation_data=(X_test, y_test))\nloss, acc = lstm_model.evaluate(X_test, y_test)\nprint(\"LSTM Test Accuracy\",acc)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:51:22.861896Z","iopub.execute_input":"2025-03-01T07:51:22.862232Z","iopub.status.idle":"2025-03-01T07:51:28.520957Z","shell.execute_reply.started":"2025-03-01T07:51:22.862204Z","shell.execute_reply":"2025-03-01T07:51:28.520280Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/45\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 318ms/step - accuracy: 0.2001 - loss: 1.7789 - val_accuracy: 0.2593 - val_loss: 1.7431\nEpoch 2/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step - accuracy: 0.4051 - loss: 1.7287 - val_accuracy: 0.4259 - val_loss: 1.6952\nEpoch 3/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step - accuracy: 0.4106 - loss: 1.6869 - val_accuracy: 0.5000 - val_loss: 1.6394\nEpoch 4/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 50ms/step - accuracy: 0.4474 - loss: 1.6346 - val_accuracy: 0.5000 - val_loss: 1.5651\nEpoch 5/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step - accuracy: 0.4683 - loss: 1.5548 - val_accuracy: 0.5000 - val_loss: 1.4706\nEpoch 6/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - accuracy: 0.4735 - loss: 1.4571 - val_accuracy: 0.4815 - val_loss: 1.3641\nEpoch 7/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.4525 - loss: 1.3667 - val_accuracy: 0.4815 - val_loss: 1.2651\nEpoch 8/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - accuracy: 0.4735 - loss: 1.2889 - val_accuracy: 0.4815 - val_loss: 1.1864\nEpoch 9/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.4736 - loss: 1.2072 - val_accuracy: 0.5000 - val_loss: 1.1426\nEpoch 10/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step - accuracy: 0.5157 - loss: 1.1672 - val_accuracy: 0.5556 - val_loss: 1.0855\nEpoch 11/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - accuracy: 0.5318 - loss: 1.1538 - val_accuracy: 0.5370 - val_loss: 1.0341\nEpoch 12/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.5736 - loss: 1.0979 - val_accuracy: 0.5185 - val_loss: 1.0894\nEpoch 13/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.5422 - loss: 1.0788 - val_accuracy: 0.5000 - val_loss: 0.9968\nEpoch 14/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.5896 - loss: 0.9860 - val_accuracy: 0.6296 - val_loss: 0.9758\nEpoch 15/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6157 - loss: 0.9732 - val_accuracy: 0.6111 - val_loss: 0.9531\nEpoch 16/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.6368 - loss: 0.9268 - val_accuracy: 0.5556 - val_loss: 0.9688\nEpoch 17/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6367 - loss: 0.8904 - val_accuracy: 0.6111 - val_loss: 0.9339\nEpoch 18/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6422 - loss: 0.8732 - val_accuracy: 0.6296 - val_loss: 0.9295\nEpoch 19/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6949 - loss: 0.8491 - val_accuracy: 0.6852 - val_loss: 0.8980\nEpoch 20/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.6894 - loss: 0.8030 - val_accuracy: 0.6111 - val_loss: 0.9090\nEpoch 21/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.7313 - loss: 0.7497 - val_accuracy: 0.6852 - val_loss: 0.8498\nEpoch 22/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6946 - loss: 0.7978 - val_accuracy: 0.6667 - val_loss: 0.8446\nEpoch 23/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7370 - loss: 0.7479 - val_accuracy: 0.5926 - val_loss: 0.8675\nEpoch 24/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.6790 - loss: 0.7827 - val_accuracy: 0.7037 - val_loss: 0.8245\nEpoch 25/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.7526 - loss: 0.7180 - val_accuracy: 0.6481 - val_loss: 0.8773\nEpoch 26/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.6894 - loss: 0.7152 - val_accuracy: 0.6667 - val_loss: 0.8444\nEpoch 27/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7210 - loss: 0.7234 - val_accuracy: 0.6481 - val_loss: 0.8787\nEpoch 28/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.7209 - loss: 0.7258 - val_accuracy: 0.7037 - val_loss: 0.8422\nEpoch 29/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.7211 - loss: 0.7256 - val_accuracy: 0.6852 - val_loss: 0.7836\nEpoch 30/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7264 - loss: 0.6676 - val_accuracy: 0.6296 - val_loss: 0.8806\nEpoch 31/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.7211 - loss: 0.6554 - val_accuracy: 0.7037 - val_loss: 0.7731\nEpoch 32/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7526 - loss: 0.5611 - val_accuracy: 0.7222 - val_loss: 0.7585\nEpoch 33/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.7475 - loss: 0.5959 - val_accuracy: 0.6667 - val_loss: 0.7480\nEpoch 34/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7946 - loss: 0.5555 - val_accuracy: 0.7407 - val_loss: 0.7478\nEpoch 35/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7842 - loss: 0.5336 - val_accuracy: 0.7407 - val_loss: 0.7312\nEpoch 36/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.8105 - loss: 0.4874 - val_accuracy: 0.7593 - val_loss: 0.7171\nEpoch 37/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.8316 - loss: 0.4588 - val_accuracy: 0.7222 - val_loss: 0.7226\nEpoch 38/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8580 - loss: 0.4533 - val_accuracy: 0.7778 - val_loss: 0.6913\nEpoch 39/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8528 - loss: 0.4595 - val_accuracy: 0.7407 - val_loss: 0.7236\nEpoch 40/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8633 - loss: 0.4178 - val_accuracy: 0.7222 - val_loss: 0.7267\nEpoch 41/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8841 - loss: 0.3385 - val_accuracy: 0.6852 - val_loss: 0.8015\nEpoch 42/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8264 - loss: 0.4260 - val_accuracy: 0.7593 - val_loss: 0.6809\nEpoch 43/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.8789 - loss: 0.3603 - val_accuracy: 0.7222 - val_loss: 0.7494\nEpoch 44/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8791 - loss: 0.3622 - val_accuracy: 0.7778 - val_loss: 0.6998\nEpoch 45/45\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.8789 - loss: 0.3427 - val_accuracy: 0.7963 - val_loss: 0.6796\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7704 - loss: 0.7722 \nLSTM Test Accuracy 0.7962962985038757\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, classification_report\ny_pred_probs = lstm_model.predict(X_test)  \ny_pred = np.argmax(y_pred_probs, axis=1)  #\ny_true = np.argmax(y_test, axis=1) \ncm = confusion_matrix(y_true, y_pred)\nlabels = list(ACTIVITIES.keys()) \nplt.figure(figsize=(8,6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix for LSTM Model')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:48:17.232911Z","iopub.execute_input":"2025-03-01T07:48:17.233219Z","iopub.status.idle":"2025-03-01T07:48:17.648844Z","shell.execute_reply.started":"2025-03-01T07:48:17.233196Z","shell.execute_reply":"2025-03-01T07:48:17.647905Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step \n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"## LSTM observations\nLSTMs are particularly useful for time-series and sequential data like our HAR (Human Activity Recognition) dataset, where past sensor readings influence future predictions.\n\nThe model performs very well despite less training features because it keeps track of previous data and then updates the parameters this helps to learn important features","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten\ncnn_model = Sequential([\n    Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(128, 9)),\n    MaxPooling1D(pool_size=2),\n    Conv1D(filters=128, kernel_size=3, activation='relu'),\n    MaxPooling1D(pool_size=2),\n    Flatten(),\n    Dense(64, activation='relu'),\n    Dense(6, activation='softmax')\n])\n\ncnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the 1D CNN Model\ncnn_model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))\n\n# Evaluate Model\nloss, acc = cnn_model.evaluate(X_test, y_test)\nprint(\"1D CNN Test Accuracy\",acc)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:50:13.254223Z","iopub.execute_input":"2025-03-01T07:50:13.254617Z","iopub.status.idle":"2025-03-01T07:50:17.736910Z","shell.execute_reply.started":"2025-03-01T07:50:13.254587Z","shell.execute_reply":"2025-03-01T07:50:17.736226Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 568ms/step - accuracy: 0.2046 - loss: 1.7391 - val_accuracy: 0.3519 - val_loss: 1.4339\nEpoch 2/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.5305 - loss: 1.3009 - val_accuracy: 0.6852 - val_loss: 1.1075\nEpoch 3/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7884 - loss: 0.9854 - val_accuracy: 0.7593 - val_loss: 0.8655\nEpoch 4/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8187 - loss: 0.6825 - val_accuracy: 0.7037 - val_loss: 0.7460\nEpoch 5/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8909 - loss: 0.4538 - val_accuracy: 0.7963 - val_loss: 0.6608\nEpoch 6/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8648 - loss: 0.3584 - val_accuracy: 0.7222 - val_loss: 0.7136\nEpoch 7/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9014 - loss: 0.3100 - val_accuracy: 0.7963 - val_loss: 0.6255\nEpoch 8/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9454 - loss: 0.2123 - val_accuracy: 0.7778 - val_loss: 0.6350\nEpoch 9/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9477 - loss: 0.1911 - val_accuracy: 0.7778 - val_loss: 0.5625\nEpoch 10/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9749 - loss: 0.1465 - val_accuracy: 0.8148 - val_loss: 0.5875\nEpoch 11/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9769 - loss: 0.1036 - val_accuracy: 0.8519 - val_loss: 0.5628\nEpoch 12/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9968 - loss: 0.0792 - val_accuracy: 0.8519 - val_loss: 0.5761\nEpoch 13/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0441 - val_accuracy: 0.8148 - val_loss: 0.5970\nEpoch 14/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0524 - val_accuracy: 0.8704 - val_loss: 0.5957\nEpoch 15/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0321 - val_accuracy: 0.8519 - val_loss: 0.6283\nEpoch 16/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0267 - val_accuracy: 0.8704 - val_loss: 0.6188\nEpoch 17/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0278 - val_accuracy: 0.8519 - val_loss: 0.6239\nEpoch 18/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0234 - val_accuracy: 0.8519 - val_loss: 0.6582\nEpoch 19/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0170 - val_accuracy: 0.8333 - val_loss: 0.6785\nEpoch 20/20\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9937 - loss: 0.0262 - val_accuracy: 0.8704 - val_loss: 0.6723\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8511 - loss: 0.7493 \n1D CNN Test Accuracy 0.8703703880310059\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"y_pred_probs = cnn_model.predict(X_test)  # Assuming model is your trained LSTM\ny_pred = np.argmax(y_pred_probs, axis=1)  # Convert one-hot to class labels\ny_true = np.argmax(y_test, axis=1)  # Convert y_test from one-hot to labels\n\n\ncm = confusion_matrix(y_true, y_pred)\nlabels = list(ACTIVITIES.keys()) \n\nplt.figure(figsize=(8,6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix for LSTM Model')\nplt.show()\n\n# Step 4: Print classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred, target_names=labels))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:47:18.312982Z","iopub.execute_input":"2025-03-01T07:47:18.313235Z","iopub.status.idle":"2025-03-01T07:47:19.138603Z","shell.execute_reply.started":"2025-03-01T07:47:18.313213Z","shell.execute_reply":"2025-03-01T07:47:19.137783Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 221ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Classification Report:\n                    precision    recall  f1-score   support\n\n           WALKING       0.58      0.78      0.67         9\n  WALKING_UPSTAIRS       0.86      0.67      0.75         9\nWALKING_DOWNSTAIRS       0.88      0.78      0.82         9\n           SITTING       1.00      0.89      0.94         9\n          STANDING       0.90      1.00      0.95         9\n            LAYING       1.00      1.00      1.00         9\n\n          accuracy                           0.85        54\n         macro avg       0.87      0.85      0.85        54\n      weighted avg       0.87      0.85      0.85        54\n\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"## CNN Model\n\nOutput is more better than LSTM as it in CNN it also learns features based on its surrounding elements which help it to create and learn important features\n\n* Only 20 epoch were taken as after that validation loss is fluctuating so early stopping was a better option","metadata":{}},{"cell_type":"code","source":"%pip install tsfel\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:47:19.140952Z","iopub.execute_input":"2025-03-01T07:47:19.141248Z","iopub.status.idle":"2025-03-01T07:47:25.316124Z","shell.execute_reply.started":"2025-03-01T07:47:19.141223Z","shell.execute_reply":"2025-03-01T07:47:25.315156Z"}},"outputs":[{"name":"stdout","text":"Collecting tsfel\n  Downloading tsfel-0.1.9-py3-none-any.whl.metadata (9.3 kB)\nRequirement already satisfied: ipython>=7.4.0 in /usr/local/lib/python3.10/dist-packages (from tsfel) (7.34.0)\nRequirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.26.4)\nRequirement already satisfied: pandas>=1.5.3 in /usr/local/lib/python3.10/dist-packages (from tsfel) (2.2.3)\nRequirement already satisfied: PyWavelets>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.8.0)\nRequirement already satisfied: requests>=2.31.0 in /usr/local/lib/python3.10/dist-packages (from tsfel) (2.32.3)\nRequirement already satisfied: scikit-learn>=0.21.3 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.2.2)\nRequirement already satisfied: scipy>=1.7.3 in /usr/local/lib/python3.10/dist-packages (from tsfel) (1.13.1)\nRequirement already satisfied: setuptools>=47.1.1 in /usr/local/lib/python3.10/dist-packages (from tsfel) (75.1.0)\nRequirement already satisfied: statsmodels>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from tsfel) (0.14.4)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.19.2)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (4.4.2)\nRequirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.7.5)\nRequirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (5.7.1)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (3.0.48)\nRequirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (2.19.1)\nRequirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.2.0)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.4.0->tsfel) (4.9.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.18.5->tsfel) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5.3->tsfel) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5.3->tsfel) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5.3->tsfel) (2025.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->tsfel) (2025.1.31)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.21.3->tsfel) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.21.3->tsfel) (3.5.0)\nRequirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.12.0->tsfel) (1.0.1)\nRequirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.12.0->tsfel) (24.2)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=7.4.0->tsfel) (0.8.4)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=7.4.0->tsfel) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=7.4.0->tsfel) (0.2.13)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.5.3->tsfel) (1.17.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.18.5->tsfel) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.18.5->tsfel) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.18.5->tsfel) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.18.5->tsfel) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.18.5->tsfel) (2024.2.0)\nDownloading tsfel-0.1.9-py3-none-any.whl (62 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.0/63.0 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: tsfel\nSuccessfully installed tsfel-0.1.9\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"## TSFEL\nInstalled Tsfel\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tsfel\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:47:25.317794Z","iopub.execute_input":"2025-03-01T07:47:25.318054Z","iopub.status.idle":"2025-03-01T07:47:26.252865Z","shell.execute_reply.started":"2025-03-01T07:47:25.318032Z","shell.execute_reply":"2025-03-01T07:47:26.252168Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"\ncfg = tsfel.get_features_by_domain()\ndef extract_features(X):\n    feature_list = []\n    for sample in X:\n        columns = ['total_acc_x', 'total_acc_y', 'total_acc_z',\n           'body_acc_x', 'body_acc_y', 'body_acc_z',\n           'body_gyro_x', 'body_gyro_y', 'body_gyro_z']\n\n        df = pd.DataFrame(sample, columns=columns)\n        features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n        feature_list.append(features.values.flatten())  \n    return np.array(feature_list)\nX_train_with_f = extract_features(X_train)\nX_test_with_f = extract_features(X_test)\nprint(X_train_with_f.shape)\nprint(X_test_with_f.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:53:11.378547Z","iopub.execute_input":"2025-03-01T07:53:11.378903Z","iopub.status.idle":"2025-03-01T07:53:28.283461Z","shell.execute_reply.started":"2025-03-01T07:53:11.378878Z","shell.execute_reply":"2025-03-01T07:53:28.282446Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n","output_type":"stream"},{"name":"stdout","text":"(126, 1404)\n(54, 1404)\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n<ipython-input-23-a924b9b4a919>:10: UserWarning: Using default sampling frequency set in configuration file.\n  features = tsfel.time_series_features_extractor(cfg, df, verbose=0)\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"import pandas as pd\ncfg = tsfel.get_features_by_domain()\nfeatures = []\nfor domain in cfg.keys():\n    for feature_name in cfg[domain].keys():\n        features.append((domain, feature_name))\ndf_features = pd.DataFrame(features, columns=['Domain', 'Feature'])\nprint(df_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:54:17.874950Z","iopub.execute_input":"2025-03-01T07:54:17.875323Z","iopub.status.idle":"2025-03-01T07:54:17.884115Z","shell.execute_reply.started":"2025-03-01T07:54:17.875296Z","shell.execute_reply":"2025-03-01T07:54:17.883406Z"}},"outputs":[{"name":"stdout","text":"      Domain                       Feature\n0   spectral  Spectrogram mean coefficient\n1   spectral         Fundamental frequency\n2   spectral            Human range energy\n3   spectral                          LPCC\n4   spectral                          MFCC\n..       ...                           ...\n62   fractal     Higuchi fractal dimension\n63   fractal                Hurst exponent\n64   fractal        Maximum fractal length\n65   fractal   Petrosian fractal dimension\n66   fractal            Multiscale entropy\n\n[67 rows x 2 columns]\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"## TSFEL features\n\nWe can see that tsfel is capable of generaring features such as spectral features (fundamental frequency , peak count), fractal features( like multiscale entropy) , statistical features ( mean, mode, covariance, autovariance)","metadata":{}},{"cell_type":"code","source":"\nX_train_flattened = X_train_with_f.reshape(X_train_with_f.shape[0], -1)\nX_test_flattened = X_test_with_f.reshape(X_test_with_f.shape[0], -1)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train_flattened)\nX_test_scaled = scaler.transform(X_test_flattened)\n\ny_train_categorical = np.argmax(y_train, axis=1)\ny_test_categorical = np.argmax(y_test, axis=1)\nmodels = {\n    \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=42),\n    \"SVM\": SVC(kernel='rbf', C=1, gamma='scale'),\n    \"Logistic Regression\": LogisticRegression(max_iter=1000)\n}\n\n# Train and evaluate models\nfor name, model in models.items():\n    model.fit(X_train_scaled, y_train_categorical)\n    y_pred = model.predict(X_test_scaled)\n    acc = accuracy_score(y_test_categorical, y_pred)\n    print(name ,\"Accuracy:\",acc)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:55:35.359577Z","iopub.execute_input":"2025-03-01T07:55:35.359911Z","iopub.status.idle":"2025-03-01T07:55:35.898551Z","shell.execute_reply.started":"2025-03-01T07:55:35.359886Z","shell.execute_reply":"2025-03-01T07:55:35.897685Z"}},"outputs":[{"name":"stdout","text":"Random Forest Accuracy: 0.8888888888888888\nSVM Accuracy: 0.8703703703703703\nLogistic Regression Accuracy: 0.9074074074074074\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"## Observations\n* Using TSFEL featurs simple models such as random forest and logistic reggression are giving far better results.\n* Thease features help us to learn complex functions as they are created by using complex equations","metadata":{}},{"cell_type":"code","source":"X_train_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train/X_train.txt\", delim_whitespace=True, header=None)\nX_test_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/test/X_test.txt\", delim_whitespace=True, header=None)\ny_test_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/test/y_test.txt\", delim_whitespace=True, header=None)\ny_train_author = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train/y_train.txt\", delim_whitespace=True, header=None)\nX_train_author_scaled = scaler.fit_transform(X_train_author)\nX_test_author_scaled = scaler.transform(X_test_author)\nprint(X_train_author_scaled.shape)\nprint(X_test_author.shape)\nprint(y_test_author.shape)\nprint(y_train_author.shape)\n\nfor name, model in models.items():\n    model.fit(X_train_author_scaled, y_train_author)  # Ensure `y_train_categorical` has correct shape\n    y_pred = model.predict(X_test_author_scaled)\n    acc = accuracy_score(y_test_author, y_pred)\n    print(name ,\"Accuracy:\",acc)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-01T07:47:43.964311Z","iopub.execute_input":"2025-03-01T07:47:43.964634Z","iopub.status.idle":"2025-03-01T07:48:09.490138Z","shell.execute_reply.started":"2025-03-01T07:47:43.964610Z","shell.execute_reply":"2025-03-01T07:48:09.489099Z"}},"outputs":[{"name":"stdout","text":"(7352, 561)\n(2947, 561)\n(2947, 1)\n(7352, 1)\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-17-08b41fb21186>:18: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n  model.fit(X_train_author_scaled, y_train_author)  # Ensure `y_train_categorical` has correct shape\n","output_type":"stream"},{"name":"stdout","text":"Random Forest Accuracy: 0.9267\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n","output_type":"stream"},{"name":"stdout","text":"SVM Accuracy: 0.9522\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n","output_type":"stream"},{"name":"stdout","text":"Logistic Regression Accuracy: 0.9545\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"## Observations\n\n* the model trained by using features provided by author has performed better than the model trained on Tsfel features despite it has much less features than Tsfel (561<1401)\n* Also Author features are also same as that of Tsfel like energy, mean and frequency\n* The reason behind this could be overfitting due to these many features in Tsfel\n* Also Tsfel features are randomly generated in large ammounts so there might be many correlated features","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Summary of all the doings\n\n* initially made a train and test set with 9 raw features (ACCx,ACCy,ACCz,GYROx,GYRoy..etc)\n* trained LSTM on it an it gave good results with (88% accuracy on test) which was expected as LSTMS are able to learn sequences and outperform when it comes to timeseries\n* Trained 1DCNN model which also gave good results as LSTM as CNNs are also able to learn patterns in chunk of data\n* Generated Tsfel features and learned Simple models like random forest, SVM and logistic regg which out performed The deep learning methods\n* Learned the same models on autor provided features, which also performed better than TSFel one, which could be possible due to many reasons like , overfitting, correlation between tsfel features etc..","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}